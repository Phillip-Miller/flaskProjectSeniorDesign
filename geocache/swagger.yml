# openapi.yml

openapi: 3.0.0
info:
  title: "Geocache REST API"
  description: "API to manipulate Location objects and User Objects"
  version: "1.0"
servers:
  - url: "/api"


components:
  securitySchemes:
    api_key:
      type: apiKey
      name: X-Auth
      in: header
      x-apikeyInfoFunc: config.apikey_auth

  schemas:

    New User:
      type: object
      required:
        - username
      properties:
        username:
          type: string

    Patch User:
      type: object
      properties:
        username:
          type: string
        score:
          type: integer
        completed_caches:
          type: array
          items:
            type: integer
        following:
          type: array
          items:
            type: integer


    New Location:
      type: object
      required:
        - cachename
        - longitude
        - latitude
        - longitude
        - difficulty
        - verificationString
      properties:
        cachename:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        hints:
          type: string
        trivia:
          type: string
        difficulty:
          type: integer
        verificationString:
          type: string
        radius:
          type: integer

    Patch Location:
      type: object
      properties:
        cachename:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        hints:
          type: string
        trivia:
          type: string
        difficulty:
          type: integer
        verificationString:
          type: string
        radius:
          type: integer


  parameters:
    verification_string:
      name: "verify_string"
      description: "String to embed in qr code to verify quest completion. MUST be unique"
      in: path
      required: True
      schema:
        type: string

    user_id:
      name: "user_id"
      description: "pull by user_id"
      in: path
      required: True
      schema:
        type: integer

    location_id:
      name: "location_id"
      description: "pull by location_id"
      in: path
      required: True
      schema:
        type: integer

security: #Globally applies this security to all functions -- JWT for granularity is better
  - api_key: [ ] #if you apply this on individual function scale can but which scopes you want in the list

paths:
  #relative url of api


  /user:
    get:
      operationId: "user.read_all"
      tags:
        - "User"
      summary: "Read the list of users -- this will eventually be limited in size"
      responses:
        "200":
          description: "Successfully read user list"

    post:
      operationId: "user.create"
      tags:
        - "User"
      summary: "Create a new user"
      requestBody:
        description: "User to create"
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New User"
      responses:
        "201":
          description: "Successfully created user"


  /user/{user_id}:
    get:
      operationId: "user.read_one"
      tags:
        - "User"
      summary: "Read user object from user name"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read user"
        "404":
          description: "User not found"
    patch:
      tags:
        - "User"
      operationId: "user.update"
      summary: "Update a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "201":
          description: "Successfully updated user"
        "404":
          description: "User ID not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patch User"
    delete:
      tags:
        - "User"
      operationId: "user.delete"
      summary: "Delete a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "204":
          description: "Successfully deleted user"
        "404":
          description: "User not found"

  /location:
    get:
      operationId: "location.read_all"
      tags:
        - "Location"
      summary: "Read the list of locations"
      responses:
        "200":
          description: "Successfully read location list"
    post:
      operationId: "location.create"
      tags:
        - "Location"
      summary: "Create a new location"
      requestBody:
        description: "Location to create"
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/New Location"
      responses:
        "201":
          description: "Successfully created location"


  /location/{location_id}:
    get:
      operationId: "location.read_one"
      tags:
        - "Location"
      summary: "Read location object from location id"
      parameters:
        - name: "location_id"
          in: path
          description: "pull by location id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully read location"
        "404":
          description: "Location not found"
    patch:
      tags:
        - "Location"
      operationId: "location.update"
      summary: "Update a location -- include whatever keys you want to update"
      parameters:
        - name: "location_id"
          in: path
          description: "pull by location id"
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: "Successfully updated location"
        "404":
          description: "Location not found"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Patch Location"
    delete:
      tags:
        - "Location"
      operationId: "location.delete"
      summary: "Delete a location"
      parameters:
        - name: "location_id"
          in: path
          description: "pull by location id"
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Successfully deleted location"
        "404":
          description: "Location not found"

  /qrverification/{verification_string}:
    get:
      operationId: "location.verify_code"
      tags:
        - "Location"
      summary: "Verify QR code and return first matching location to the string"
      parameters:
        - name: "verification_string"
          in: path
          description: "verification string provided by code"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully found location"
        "404":
          description: "Location not found"



