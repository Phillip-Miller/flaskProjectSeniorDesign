# swagger.yml

openapi: 3.0.0
info:
  title: "Geocache Flask REST API"
  description: "API to manipulate Location objects and User Objects"
  version: "0.0.1"
servers:
  - url: "/api"


components:
  schemas:
    User:
      type: object
      required:
        - username
      properties:
        username:
          type: string
        score:
          type: integer
        following:
          type: array
          items:
            type: integer
    Location:
      type: object
      required:
        - cachename
      properties:
        cachename:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        hints:
          type: string
        trivia:
          type: string
        difficulty:
          type: integer
        radius:
          type: integer
        imageURL: # Add imageURL property
          type: string

  parameters:
    user_id:
      name: "user_id"
      description: "pull by user_id"
      in: path
      required: True
      schema:
        type: integer

    location_id:
      name: "location_id"
      description: "pull by location_id"
      in: path
      required: True
      schema:
        type: integer

paths:
  #relative url of api
  /user:
    get:
      operationId: "user.read_all"
      tags:
        - "User"
      summary: "Read the list of users -- this will eventually be limited in size"
      responses:
        "200":
          description: "Successfully read user list"
    post:
      operationId: "user.create"
      tags:
        - "User"
      summary: "Create a new user"
      requestBody:
        description: "User to create"
        required: True
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successfully created user"

  /user/{user_id}:
    get:
      operationId: "user.read_one"
      tags:
        - "User"
      summary: "Read user object from user name"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read user"
    put:
      tags:
        - "User"
      operationId: "user.update"
      summary: "Update a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully updated user"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
    delete:
      tags:
        - "User"
      operationId: "user.delete"
      summary: "Delete a user"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "204":
          description: "Successfully deleted user"

  /location:
    get:
      operationId: "location.read_all"
      tags:
        - "Location"
      summary: "Read the list of locations"
      responses:
        "200":
          description: "Successfully read location list"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Location"

  /location/{location_id}:
    get:
      operationId: "location.read_one"
      tags:
        - "Location"
      summary: "Read location object from location id"
      parameters:
        - name: "location_id"
          in: path
          description: "pull by location id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully read location"
    put:
      tags:
        - "Location"
      operationId: "location.update"
      summary: "Update a location"
      parameters:
        - name: "location_id"
          in: path
          description: "pull by location id"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Successfully updated location"
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: "location"
              $ref: "#/components/schemas/Location"
    delete:
      tags:
        - "Location"
      operationId: "location.delete"
      summary: "Delete a location"
      parameters:
        - name: "location_id"
          in: path
          description: "pull by location id"
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: "Successfully deleted location"


